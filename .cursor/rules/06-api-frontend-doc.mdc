---
description: 
globs: 
alwaysApply: true
---
# 前端API文档维护指南

本规则指导如何维护和更新 [API_frontend.md](mdc:frontend/docs/API_frontend.md) 文档，用于记录前端模块的API接口信息。

## 文档目的

API_frontend.md 文档旨在：
- 详细记录前端各组件、模块的接口定义
- 提供清晰的接口使用示例
- 统一前端接口文档格式
- 作为开发参考，便于快速查阅
- 确保新功能开发与现有架构保持一致
- 帮助新开发人员快速理解系统架构

## 文档结构

API_frontend.md 应包含以下主要部分：

1. **整体架构**
   - 技术栈概述
   - 主要依赖库
   - 架构设计原则

2. **布局组件**
   - 各布局组件接口定义
   - Props及类型定义
   - 状态管理方式
   - 主要方法说明
   - 使用示例

3. **功能组件**
   - 工作流设计器核心组件
   - 各组件接口定义
   - Props及类型定义
   - 状态管理方式
   - 主要方法说明
   - 使用示例

4. **数据类型**
   - 核心数据类型定义
   - 接口定义
   - 类型关系说明

5. **工具函数**
   - 通用工具函数说明
   - 参数及返回值定义
   - 使用示例

6. **命名规范**
   - 组件命名规范
   - 变量命名规范
   - 文件命名规范

7. **版本记录**
   - 当前版本
   - 最近更新日期

## 组件文档格式

每个组件的文档应包含以下部分：

1. **文件位置**: 组件所在文件路径
2. **功能**: 组件功能描述
3. **Props接口**: 组件的Props定义，使用TypeScript接口格式
4. **状态管理**: 组件内部状态管理方式
5. **主要方法**: 组件关键方法及其功能
6. **使用示例**: 组件使用代码示例

格式示例：
```markdown
### ComponentName

**文件位置**: `frontend/src/components/path/ComponentName.tsx`  
**功能**: 简要描述组件功能和用途

#### Props接口

```typescript
interface ComponentNameProps {
  prop1: string;       // prop1说明
  prop2: number;       // prop2说明
  onEvent: () => void; // 事件处理函数说明
}
```

#### 状态管理

```typescript
const [state1, setState1] = useState<string>('');
const [state2, setState2] = useState<number>(0);
```

#### 主要方法

```typescript
// 方法1说明
const method1 = () => {
  // 方法实现示例
};

// 方法2说明
const method2 = (param: string) => {
  // 方法实现示例
};
```

#### 使用示例

```tsx
<ComponentName
  prop1="value"
  prop2={42}
  onEvent={() => console.log('事件触发')}
/>
```
```

## 数据类型文档格式

数据类型文档应包含以下内容：

1. **接口/类型名称**
2. **属性说明**: 包括类型、是否可选、默认值
3. **相关接口/类型**: 与该类型相关的其他类型
4. **使用场景**: 在哪些组件中使用

## 更新规则

在以下情况下，应更新 API_frontend.md 文档：

1. 新增组件时
2. 修改现有组件接口时
3. 添加新的功能方法时
4. 修改组件Props时
5. 添加新的数据类型时
6. 修改数据类型定义时
7. 添加或修改工具函数时

## 更新流程

1. 确认接口变更内容
2. 在相应章节更新接口文档
3. 更新使用示例
4. 确保文档格式一致性
5. 更新版本记录中的最近更新日期

## 注意事项

1. **保持简洁清晰**: 文档应简洁明了，避免冗余
2. **实时更新**: 接口变更后应立即更新文档
3. **类型完备**: 确保所有参数类型都有明确定义
4. **示例具体**: 提供具体、可执行的使用示例
5. **命名一致**: 文档中的命名应与代码保持一致
6. **说明充分**: 为所有参数提供充分说明

## 版本管理

- 次要更新（接口内部实现变化）：增加修订号（如0.1.0 → 0.1.1）
- 较大更新（接口参数变化）：增加次版本号（如0.1.1 → 0.2.0）
- 重大更新（接口结构变化）：增加主版本号（如0.2.0 → 1.0.0）


