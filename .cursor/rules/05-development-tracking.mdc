---
description: 
globs: 
alwaysApply: true
---
# 项目开发追踪指南

本规则指导如何创建和维护 [development.md](mdc:development.md) 文档，用于记录项目开发进度和状态。

## 文档目的

development.md 文档旨在：
- 记录项目当前的完成情况
- 详细说明已完成模块或功能的功能说明、属性和接口
- 追踪项目变更历史
- 为开发人员和AI助手提供项目状态的最新信息
- 统一项目开发规范和最佳实践
- 明确项目目标和发展方向

## 文档结构

development.md 应包含以下主要部分：

1. **项目目标**
   - 总体目标
   - 阶段性目标
   - 预期应用场景
   - 用户需求和期望

2. **项目概况**
   - 当前版本
   - 整体完成度
   - 最近更新日期
   - 主要功能列表

3. **项目目录结构**
   - 主要目录和文件说明
   - 各目录的功能和职责
   - 模块间的依赖关系
   - 配置文件说明

4. **核心组件状态**
   - 每个核心组件的开发状态
   - 已实现功能和待实现功能
   - 已知问题和限制
   - 组件间交互方式

5. **模块开发状态**
   - 已完成模块列表和详细说明
   - 模块接口说明
   - 模块依赖关系
   - 模块使用示例

6. **最近更新记录**
   - 按时间倒序排列的更新日志
   - 每次更新的主要变更内容
   - 变更原因和影响
   - 版本兼容性说明

7. **计划开发功能**
   - 计划中的功能和模块
   - 预计完成时间
   - 优先级和依赖关系
   - 技术风险评估

8. **代码规范**
   - 通用编码规范
   - 语言特定规范（Python、React、Rust等）
   - 命名约定
   - 文件组织规则
   - 注释要求
   - 类型提示使用

9. **最佳实践**
   - 架构设计原则
   - 测试策略和方法
   - 性能优化建议
   - 安全性考虑
   - 扩展性设计模式
   - 常见问题解决方案

## 更新规则

在以下情况下，应更新 development.md 文档：

1. 新增功能或模块时
2. 修改现有功能或接口时
3. 修复重要bug时
4. 项目架构或设计发生变更时
5. 完成阶段性目标时
6. 代码规范或最佳实践发生变化时
7. 项目目标或路线图调整时

## 更新流程

1. 确认变更内容和影响范围
2. 更新相应章节的内容
3. 在最近更新记录部分添加新的条目
4. 更新项目概况中的版本号和最近更新日期
5. 如果需要，更新计划开发功能部分
6. 确保代码规范和最佳实践章节与实际开发保持一致

## 格式约定

- 使用Markdown格式编写
- 使用标题层次结构（#、##、###等）组织内容
- 使用列表、表格等元素提高可读性
- 为重要信息添加强调（**粗体**、*斜体*等）
- 使用代码块展示代码示例
- 提供完整的示例和上下文
- 每次更新必须使用MCP服务去网上查询当前日期，以保证日期的准确,不允许修改文档中原本存在的日期

## 项目目标部分示例

```markdown
## 项目目标

### 总体目标

创建一个灵活、可扩展的工作流系统，使用户能够以可视化方式创建、配置和执行各种数据处理任务，无需编写复杂代码。

### 阶段性目标

1. **阶段一（当前）**: 
   - 完成核心框架实现
   - 开发基础模块集
   - 提供基本序列化/反序列化支持

2. **阶段二**:
   - 开发Web界面
   - 实现更多专业模块
   - 支持工作流导入/导出

3. **阶段三**:
   - 提供云部署支持
   - 开发团队协作功能
   - 实现工作流市场

### 应用场景

- **数据分析流程**: 数据读取、清洗、转换、分析、可视化
- **自动化测试**: 测试用例生成、执行、结果分析
- **内容处理**: 文档处理、媒体转换、批量操作
- **系统集成**: 连接不同系统和服务，实现数据交换
```

## 项目目录结构部分示例

```markdown
## 项目目录结构

### 主要目录

- **workflow/**: 工作流系统核心包
  - **core/**: 核心组件实现
    - **base_module.py**: 模块基类及接口定义
    - **workflow.py**: 工作流类实现
    - **module_registry.py**: 模块注册表实现
    - **engine.py**: 工作流执行引擎实现
  - **examples/**: 示例模块和工作流
    - **example_modules.py**: 预定义模块实现
    - **example_workflow.py**: 示例工作流
    - **example_workflow.json**: 序列化后的工作流示例
  - **__init__.py**: 包初始化和接口导出

### 配置文件

- **.gitignore**: Git忽略规则配置
- **setup.py**: 包安装配置
- **requirements.txt**: 依赖项配置

### 文档文件

- **README.md**: 项目概述和使用说明
- **development.md**: 开发状态文档
- **docs/**: 详细文档目录（计划中）
```

## 代码规范部分示例

```markdown
## 代码规范

### Python 代码规范

- **格式化**: 使用Black格式化工具，行长度限制为88字符
- **类型提示**: 所有函数和方法都应使用类型提示
- **文档字符串**: 使用Google风格的docstring
- **导入顺序**: 标准库 > 第三方库 > 本地模块，按字母排序
- **命名约定**:
  - 类名: 使用CamelCase（如BaseModule）
  - 函数/方法名: 使用snake_case（如add_module）
  - 常量: 使用UPPER_CASE（如MAX_MODULES）
  - 模块成员变量: 使用_前缀（如self._id）
  - 全局变量: 使用g前缀（如gmodule_registry）

### JavaScript/React 代码规范（前端计划）

- **格式化**: 使用Prettier，ESLint检查
- **组件**: 优先使用函数组件和Hooks
- **命名约定**:
  - 组件: 使用PascalCase（如WorkflowEditor）
  - 函数/变量: 使用camelCase（如connectModules）
  - 常量: 使用UPPER_CASE（如DEFAULT_SETTINGS）
- **文件组织**: 每个组件一个文件，与组件同名
```

## 最佳实践部分示例

```markdown
## 最佳实践

### 架构设计原则

- **单一职责**: 每个模块和组件应专注于单一功能
- **依赖注入**: 避免硬编码依赖，使用注入方式
- **开闭原则**: 设计支持扩展而非修改
- **接口分离**: 定义精确的小接口而非大而全的接口
- **可测试性**: 设计便于单元测试的组件结构

### 测试策略

- **单元测试**: 针对各组件和模块的独立测试
- **集成测试**: 测试组件间交互
- **端到端测试**: 测试完整工作流执行

### 性能优化

- **延迟加载**: 按需加载模块和资源
- **缓存策略**: 合理缓存计算结果和资源
- **并行处理**: 支持模块并行执行优化性能

### 扩展性设计

- **插件架构**: 使用插件机制扩展功能
- **事件系统**: 使用事件解耦组件交互
- **适配器模式**: 使用适配器连接外部系统
```

## 文档位置和访问

development.md 文件应位于项目根目录，便于访问和更新。Cursor AI应在提供代码建议和实现时，参考该文档获取项目最新状态信息。



